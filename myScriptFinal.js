/* !Date: 19.12.2017 Copyright ©2017-2018 JavaScript Code by Cătălin Anghel-Ursu @Madness2aMaze (https://codepen.io/Madness2aMaze)

- All Rights Reserved!

//***My thanks and credit goes to Dan Purdy https://www.danpurdy.co.uk  for inspiring me to write the flasher() function for my project***

MIT License

Copyright (c) 2017-2018 Cătălin Anghel-Ursu (https://github.com/Madness2aMaze/Simon-Game-App)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. */

$(document).ready(function() {
  var uiPlayBox = $(".play-box"),
      uiDisplay = $(".display"),
      uiSwitch = $(".switch"),
      uiStrict = $(".strict"),
      uiFooter = $(".footer"),
      padIndex = [0, 1, 2, 3],
      uiInner = $(".inner"),
      uiOuter = $(".outer"),
      uiStart = $(".start"),
      uiLevel = $(".level"),
      uiGreen = $(".green"),
      uiYlow = $(".yellow"),
      uiOnOff = $(".knob"),
      uiPlay = $(".play"),
      uiBlue = $(".blue"),
      uiRed = $(".red"),
      uiPad = $(".pad"),
      userCollector = [], //the array containing the numbers from user selected pads
      aiCollector = [], //the array containing the generated random pads
      difficulty = 20, //20 = lowest difficulty //difficulty increases as the number decreases
      active = false, //the state of the game turn
      strict = false, //boolean var used on the strict/not strict switch
      lastSequence, // the last recent code sequence      
      start = true,
      userPick = 0, //the code sequence generated by the user selected pads
      aiPick = 0, //the random generated code sequence
      pads = {
        //object containing the id of the pads
        "0": "#0",
        "1": "#1",
        "2": "#2",
        "3": "#3"
      },
      on = false, //boolean var used for the on/off switch
      level = 0; //the level for the progress of the game

  uiPlay.addClass("color-me"); //adds a 4 color animation on the play button
  uiPlayBox.addClass("color-border"); //adds a 4 color animation on the play-box border
  
  uiPlay.click(function() { //opens the game UI wich in turn starts a couple of timed animations
    uiPlayBox.css("transform", "scale(1.2, 1.2)");
    uiPlayBox.css("opacity", ".5");
    uiPlay.css("transform", "scale(1.2, 1.2)");
    uiPlay.css("opacity", ".5");

    setTimeout(function() {
      uiPlayBox.css("display", "none");
      uiOuter.css("display", "block");
    }, 100);

    setTimeout(function() {
      uiGreen.addClass("visible");
    }, 500);
    setTimeout(function() {
      uiRed.addClass("visible");
    }, 600);
    setTimeout(function() {
      uiYlow.addClass("visible");
    }, 700);
    setTimeout(function() {
      uiBlue.addClass("visible");
    }, 800);
    setTimeout(function() {
      uiInner.addClass("zoom-in");
      uiInner.removeClass("invisible");
      uiOuter.removeClass("invisible");
      uiFooter.css("display", "block");
      uiFooter.addClass("visible");
    }, 1000);
  });  
  
  function restartGame() { //restarts the game
    level = 0;
    active = false;
    difficulty = 20;
    aiCollector = [];
    userCollector = [];
    uiLevel.html("00");
  }
  
  function reset() { //resets the game
    level = 0;
    on = false;
    start = true;
    active = false;
    strict = false;
    difficulty = 20;
    aiCollector = [];
    userCollector = [];
    uiLevel.html("00");
    uiOnOff.addClass("slide-l");
    uiPad.removeClass("active");
    uiOnOff.removeClass("slide-r");
    uiLevel.removeClass("zoom-in");
    uiStrict.removeClass("str-on");
    uiPad.css("cursor", "default");
    uiDisplay.addClass("invisible");
    uiStart.css("cursor", "default");
    uiStrict.css("cursor", "default");
    uiSwitch.css("background", "#f44242");
  }
  
  function toggleOffToOn() { //switching the game ON
    on = true;
    aiCollector = [];
    userCollector = [];
    uiLevel.html("00");
    uiLevel.addClass("zoom-in");
    uiOnOff.addClass("slide-r");
    uiOnOff.removeClass("slide-l");
    setTimeout(function() {
      uiLevel.removeClass("zoom-in");
    }, 1000);
    uiDisplay.removeClass("invisible");
    uiSwitch.css("background", "#91e842");
    if (on) {
      uiStart.css("cursor", "pointer");
      uiStrict.css("cursor", "pointer");
    }
    $(this).one("click", toggleOnToOff);
  }

  function toggleOnToOff() { //switching the game OFF    
    reset();
    $(this).one("click", toggleOffToOn);
  }
  uiSwitch.one("click", toggleOffToOn);
  
  //activates/deactivates the strict mode
  function toggleNoStrToStr() { //switching strict ON
    if (on) {
      uiStrict.addClass("str-on");
      strict = true;
    }
    $(this).one("click", toggleStrToNoStr);
  }
  function toggleStrToNoStr() { //switching strict OFF
    if (on) {
      uiStrict.removeClass("str-on");
      strict = false;
    }
    $(this).one("click", toggleNoStrToStr);
  }
  uiStrict.one("click", toggleNoStrToStr);
  
  function randomizer(min, max) { //the randomizer() that generates random numbers from a range
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  function soundBit(num) { //controls the sound selectors for every pad
    var sound = $(".track" + num)[0];
    //console.log(sound);
    sound.currentTime = 0; //resets audio position to the start of the track
    //sound.load(); //in case the file refuses to play multiple times
    sound.play();
  }
  //=====================================================================================================================================
  //***My thanks and credit goes to Dan Purdy https://www.danpurdy.co.uk  for inspiring me to write the flasher() function for my project.***
  function flasher(el, times, speed, pad) { //flashes the coresponding pad based on the randomizer output
    if (times > 0) { //making sure the pads flash      
      soundBit(pad); //play the corresponding pad sound      
      el.stop().animate( //flashing the element by reducing opacity
        {opacity: ".1"},
        {duration: 200,
         complete: function() {
           el.stop().animate({ opacity: "1" }, 200);
         }
        }
      ); //end animation      
    }
    if (times > 0) { //recalling the flasher until the correct amount of times is completed
      setTimeout(function() {
        flasher(el, times, speed, pad);
      }, speed);
      times--; // -1 for every call
    }    
  }
  //====================================================================================================================================
  function lvlBlinker(times) { //controls the displayed level blinks
    setTimeout(function() {
      uiLevel.addClass("blink");
    }, 500);
    setTimeout(function() {
      uiLevel.removeClass("blink");
    }, 1800 * times);
  }
  
  function repeatSequence() { //repeats the last recent code sequence
    $.each(lastSequence, function(index, val) {
      var id = lastSequence[index],
          uiPads = $(pads[id]);
      setTimeout(function() {
        flasher(uiPads, 1, 500, val);
        uiLevel.html(level);
      }, 60 * index * difficulty);
    });    
  }
  
  function setDifficulty() { //controls the difficulty setting based on the level value
    //20 = lowest difficulty
    //difficulty increases as the value decreases and the game level value increases
    if (level <= 10) {
      difficulty--; //difficulty val goes step by step from 20 to 10 with each level increase
    }
    if (level > 10 && level <= 13) { //difficulty keeps constant between level 10 and 13
      difficulty = 8;
    }
    if (level > 13 && level <= 16) { //difficulty keeps constant between level 14 and 16
      difficulty = 7;
    }
    if (level > 16 && level <= 20) { //difficulty keeps constant between level 17 and 20
      difficulty = 6;
    }
    //console.log(difficulty);
  }

  function nextLevel() {
    if (on) {      
      level++;
      level = level < 10 ? "0" + level : level; // if level < 10 to add a "0" in front of the number
      if (level > 20) { //Game Won!
        lvlBlinker(4);
        // displaye the Winner's Trophy
        uiLevel.html("<i class='fa fa-trophy' aria-hidden='true'></i>");
        setTimeout(function() {
          uiLevel.html("GO!"); //getting ready for a new game
          lvlBlinker(1);
        }, 8000);
        setTimeout(function() {//starting a new game
          lvlBlinker(1);
          restartGame();
          nextLevel();
        }, 10000);
      } else {
        uiLevel.html(level);
      }
      setDifficulty(); //calling the setDifficuty function that controls the difficulty
      userCollector = []; //clears the userCollector array to be ready for the next level
      aiCollector.push(randomizer(0, 3)); //pushes a random number to the aiCollector array
      lastSequence = aiCollector; //storing the last code sequence to this var
      console.log(lastSequence.length);
      var tempStr = aiCollector.toString(),
          tempArr = tempStr.split(",");
      aiPick = tempArr.reduce((x, y) => x.concat(y)); //converts all the separate values into a code sequence
      console.log(aiCollector);
      console.log(aiPick);
      
      // a loop that controls the way the colored pads are highlighted during the random sequence
      //displays the random sequence to the user
      $.each(aiCollector, function(index, val) { //iterate over each value in the generated array
        var id = aiCollector[index],
            uiPads = $(pads[id]);
        //console.log(val);
        setTimeout(function() {
          flasher(uiPads, 1, 500, val);          
        }, 60 * index * difficulty); //flashing the pads sequentially        
      });
      active = true;
      uiPad.css("cursor", "pointer");
    }
  }
  
  //checks the two code sequences against each other
  function checkSequence(a, b) { 
    
    var aStr = a.toString(),
        bStr = b.toString(),
        checker = Math.min(aStr.length, bStr.length);
    
    for (var i = 0; i < checker; i++) {
      if (aStr.charAt(i) !== bStr.charAt(i)) {
        lvlBlinker(2);
        //if incorrect to be notified using a frown icon and call the lastSequence()
        uiLevel.html("<i class='fa fa-frown-o' aria-hidden='true'></i>");
        if (strict) {          
          setTimeout(function() {
            restartGame();
            nextLevel();
          }, 2000);          
        } else {
          setTimeout(function() {
            repeatSequence(); //repeats the last recent code sequence
            userCollector = []; //clears the userCollector arr for a new user input
          }, 700 * (level / 2));
        }        
      }
    }
    if (a.length === b.length) {
      if (a === b) {
        setTimeout(function() {
          nextLevel();
        }, 1000);
      }
    }
  }
  
  // looping through pads based on id
  $.each(padIndex, function(i) { //controls the user input
    var uiPads = $(pads[i]);
    uiPads.mousedown(function() {
      //mousedown event
      if (on) {
        if (active) {        
          soundBit(i);
          uiPads.addClass("active");
          uiOuter.addClass("outer-active");
          userCollector.push(uiPads.html());
          userPick = userCollector.reduce((x, y) => x.concat(y)); //converts all the separate values into a code sequence
          console.log(userCollector);
          console.log(userPick);
          checkSequence(userPick, aiPick);                 
        }
      }
    });
    uiPads.mouseup(function() {
      //mouseup event
      uiPads.removeClass("active");
      uiOuter.removeClass("outer-active");
    });
  });

  uiStart.click(function() {// starts the game session and if clicked again restarts the game
    if (on) {
      if (start) {
        //start = false;
        restartGame();
        if (level < 2) {
          lvlBlinker(1);
        }
        setTimeout(function() {
          nextLevel();
        }, 2000);
      }
    }
  });

  /*uiStart.click(function() { // used to test the progression on the levels to the endgame
    nextLevel();
  });*/
  
});
